% This function identifies trajectories with data for both leader and
% follower, and identifies when leader vehicles change lanes.

% (This function assumes that no vehicle in the dataset starts without a leader and
% acquires one - needs to be checked)

% input: trajectory_data = input matrix generated by the read_ngsim
%        function

% temporary variables: 

% output: trajectory_attribute_data = a # column matrix describing when
%         when the leader changes, or the follower changes lanes
%         column 1 = section id (can be used to count number of changes,
%         column 2 = start time stamp, column 3 = end time stamp, column 4 =
%         leader id, column 5 = lane id

function trajectory_attribute_data = detect_trajectory_change(trajectory_data)

% start counting sections
section_counter = 1;

i = 2; % initiate loop index
% the first section is assigned a starting position
trajectory_attribute_data(section_counter,1:2) = 1; 
trajectory_attribute_data(section_counter,4) = trajectory_data(1,6);
trajectory_attribute_data(section_counter,5) = trajectory_data(1,9);

% as long as we haven't reached the end of the dataset, and the follower
% being analyzed still has a vehicle in front of them (leader is present)
while i <= size(trajectory_data,1)
    if ((trajectory_data(i,6) ~= trajectory_data(i-1,6)) || (trajectory_data(i,9) ~= trajectory_data(i-1,9)))
        % set end point of last section
        trajectory_attribute_data(section_counter,3) = i-1;
        section_counter = section_counter + 1;
        trajectory_attribute_data = [trajectory_attribute_data; [section_counter,i,0,trajectory_data(i,6),trajectory_data(i,9)]];
    end
    
    % if the leader vehicle number changes, and the vehicle number is valid
%    if (preceding_vehicle_id(i,1) ~= vehicle_num && i<= size(preceding_vehicle_id,1) && (preceding_vehicle_id(i,1)>0))
%        j = j+1; % count the lane change
%        lane_change(j) = i; % and store the time step location of the lane change for output
%    end
    i = i+1; % move forward one step in the dataset
    if (size(trajectory_data,1)<i)
        trajectory_attribute_data(section_counter,3) = i-1;
    end
end
    